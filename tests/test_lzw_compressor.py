import pytest # type: ignore
from LZW.Compressor import LZWCompressor

# Variáveis de controle
SIGMA_SIZE = 256
DEFAULT_CODE_BITS = 12
INITIAL_BITS_SIZE = 9
CODE_CONTROL_BITS = 32

def test_compressing_with_fixed_size():
    compressor = LZWCompressor(SIGMA_SIZE, CODE_CONTROL_BITS, DEFAULT_CODE_BITS, DEFAULT_CODE_BITS)
    content = "Em Algoritmos II, falhar nos testes não é o fim — é apenas uma oportunidade para otimizar o código e melhorar a complexidade!"
    result = compressor.Compress(content)
    _, compressed = LZWCompressor.ExtractCodeLenghtAndContent(result, CODE_CONTROL_BITS)
    assert compressed
    
def test_compressing_with_empty_string():
    compressor = LZWCompressor(SIGMA_SIZE, CODE_CONTROL_BITS, DEFAULT_CODE_BITS, DEFAULT_CODE_BITS)
    result = compressor.Compress("")
    _, compressed = LZWCompressor.ExtractCodeLenghtAndContent(result, CODE_CONTROL_BITS)
    assert compressed == ""

def test_compressing_with_repeated_characters():
    compressor = LZWCompressor(SIGMA_SIZE, CODE_CONTROL_BITS, DEFAULT_CODE_BITS, DEFAULT_CODE_BITS)
    result = compressor.Compress("AAAAAA")
    _, compressed = LZWCompressor.ExtractCodeLenghtAndContent(result, CODE_CONTROL_BITS)
    assert compressed == "001000001100000000100000001"

def test_compressing_with_numerical_sequence():
    compressor = LZWCompressor(SIGMA_SIZE, CODE_CONTROL_BITS, DEFAULT_CODE_BITS, DEFAULT_CODE_BITS)
    result = compressor.Compress("12345678901234567890")
    _, compressed = LZWCompressor.ExtractCodeLenghtAndContent(result, CODE_CONTROL_BITS)
    assert compressed == "000110001000110010000110011000110100000110101000110110000110111000111000000111001000110000100000000100000010100000100100000110100001000"

def test_compressing_with_special_characters():
    compressor = LZWCompressor(SIGMA_SIZE, CODE_CONTROL_BITS, DEFAULT_CODE_BITS, DEFAULT_CODE_BITS)
    result = compressor.Compress("!@#$%^&*()_+-=[]{}|;:',.<>/?")
    _, compressed = LZWCompressor.ExtractCodeLenghtAndContent(result, CODE_CONTROL_BITS)
    assert compressed == "000100001001000000000100011000100100000100101001011110000100110000101010000101000000101001001011111000101011000101101000111101001011011001011101001111011001111101001111100000111011000111010000100111000101100000101110000111100000111110000101111000111111"

def test_compressing_with_long_string():
    compressor = LZWCompressor(SIGMA_SIZE, CODE_CONTROL_BITS, DEFAULT_CODE_BITS, DEFAULT_CODE_BITS)
    content = "A" * 10000  # 10.000 caracteres 'A'
    result = compressor.Compress(content)
    _, compressed = LZWCompressor.ExtractCodeLenghtAndContent(result, CODE_CONTROL_BITS)
    assert compressed

def test_extract_code_control_bits_empty_compressing():
    compressor = LZWCompressor(SIGMA_SIZE, CODE_CONTROL_BITS, DEFAULT_CODE_BITS, DEFAULT_CODE_BITS)
    result = compressor.Compress("")
    code_control_bits, _ = LZWCompressor.ExtractCodeLenghtAndContent(result, CODE_CONTROL_BITS)
    assert INITIAL_BITS_SIZE == code_control_bits

def test_extract_code_control_bits_compressing():
    compressor = LZWCompressor(SIGMA_SIZE, CODE_CONTROL_BITS, DEFAULT_CODE_BITS, DEFAULT_CODE_BITS)
    content = "Em Algoritmos II, falhar nos testes não é o fim — é apenas uma oportunidade para otimizar o código e melhorar a complexidade!"
    result = compressor.Compress(content)
    code_control_bits, _ = LZWCompressor.ExtractCodeLenghtAndContent(result, CODE_CONTROL_BITS)
    assert code_control_bits == 9

